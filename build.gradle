apply plugin: "eclipse-wtp"
apply plugin: "java"
apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "jetty"

// 반드시 수정 시작
// 자바 버전
sourceCompatibility = 1.6
// 개발할 애플리케이션 버전
version = "1.0"
// 개발할 애플리케이션 명
archivesBaseName = "eazimemo"
// 개발할 애플리케이션 그룹명
group = "asia.sejong"
// 의존성 설정에 사용할 프로퍼티
springVersion = "3.2.0.RELEASE"
logbackVersion = "1.1.2"
aspectjVersion = "1.7.4"
slf4jVersion =  "1.7.7"
// 반드시 수정 종료

// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

// 메이븐 Central 저장소 사용
repositories {
    mavenCentral()
}

eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc=true
    }
}


war {
    baseName = "$archivesBaseName"
    archiveName = "$archivesBaseName"
    from "war" 
 
    manifest {
        attributes "Implementation-Title": "$archivesBaseName"
        attributes "Implementation-Version": "$archivesBaseName"
        attributes provider: "gradle"
    }
}

task jettyRunTasks << {
	println "jettyRun before..."
	
    jettyRunWar.daemon = false 
	println "getWebApp "+jettyRunWar.getWebApp()
	println "getJettyConfig "+jettyRunWar.getJettyConfig()
	jettyRunWar.startJetty()
	println "jettyRun...after"
}

// 의존성 설정
dependencies {
	compile("org.aspectj:aspectjrt:$project.ext.aspectjVersion")
	compile("org.aspectj:aspectjweaver:$project.ext.aspectjVersion")
	
	compile("org.springframework:spring-context:$project.ext.springVersion")
	compile("org.springframework:spring-orm:$project.ext.springVersion")
	compile("org.springframework:spring-webmvc:$project.ext.springVersion")
	compile("org.springframework:spring-tx:$project.ext.springVersion")
	compile "org.springframework:spring-test:$project.ext.springVersion"
	
	compile("commons-dbcp:commons-dbcp:1.4")
	compile("org.hsqldb:hsqldb:2.3.2")
	compile "org.mybatis:mybatis:3.2.2"
	compile "org.mybatis:mybatis-spring:1.2.1"
	compile("mysql:mysql-connector-java:5.1.26")
	compile("commons-logging:commons-logging:1.1.3")
	
	compile("javax.servlet:jstl:1.2")
	compile("taglibs:standard:1.1.2")
   
	compile("commons-io:commons-io:2.4")
	compile("commons-fileupload:commons-fileupload:1.3.1")
	
	providedCompile("javax.servlet:javax.servlet-api:3.0.1")
	providedCompile("javax.servlet.jsp:javax.servlet.jsp-api:2.2.1")
	
	//compile 'com.google.code.gson:gson:2.3.1'
	compile 'com.fasterxml.jackson.core:jackson-core:2.4.4'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.4'
	//compile 'org.commonjava.googlecode.markdown4j:markdown4j:2.2-cj-1.0'
	compile 'org.pegdown:pegdown:1.5.0'
	
	compile "com.googlecode.log4jdbc:log4jdbc:1.2"
	
	compile "org.slf4j:slf4j-api:$project.ext.slf4jVersion"
	compile "ch.qos.logback:logback-core:$project.ext.logbackVersion"
	compile "ch.qos.logback:logback-classic:$project.ext.logbackVersion"
		
	testCompile("junit:junit:4.11")
}

// commons-logging 의존성 제거
configurations {
    all.collect { configuration ->
    	// spring test 에서 사용
        //configuration.exclude group: "commons-logging", module: "commons-logging"
        configuration.exclude group: "log4j", module: "log4j"
    }
}

// TEST 설정
test {
    jvmArgs = ["-ea", "-Xmx256m"]
    logging.captureStandardOutput(LogLevel.INFO)
    testReport = false
}

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: "initialize project") << {
    createDir = {
        println "create source directory: $it"
        it.mkdirs()
    }
    sourceSets*.java.srcDirs*.each createDir
    sourceSets*.resources.srcDirs*.each createDir
    createDir webAppDir
    createDir new File(webAppDir, "/WEB-INF")
}

eclipseJdt << {
    File f = file(".settings/org.eclipse.core.resources.prefs")
    f.write("eclipse.preferences.version=1\n")
    f.append("encoding/<project>=UTF-8")
}